<?php// +----------------------------------------------------------------------// | ThinkPHP [ WE CAN DO IT JUST THINK ]// +----------------------------------------------------------------------// | Copyright (c) 2006-2016 http://thinkphp.cn All rights reserved.// +----------------------------------------------------------------------// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )// +----------------------------------------------------------------------// | Author: 流年 <liu21st@gmail.com>// +----------------------------------------------------------------------// 应用公共文件use think\Db;/** * 子元素计数器 * @param array $array * @param int $pid * @return array */function array_children_count($array, $pid){    $counter = [];    foreach ($array as $item) {        $count = isset($counter[$item[$pid]]) ? $counter[$item[$pid]] : 0;        $count++;        $counter[$item[$pid]] = $count;    }    return $counter;}/** * 数组层级缩进转换 * @param array $array 源数组 * @param int $pid * @param int $level * @return array */function array2level($array, $pid = 0, $level = 1){    static $list = [];    foreach ($array as $v) {        if ($v['pid'] == $pid) {            $v['level'] = $level;            $list[] = $v;            array2level($array, $v['id'], $level + 1);        }    }    return $list;}/** * 构建层级（树状）数组 * @param array $array 要进行处理的一维数组，经过该函数处理后，该数组自动转为树状数组 * @param string $pid_name 父级ID的字段名 * @param string $child_key_name 子元素键名 * @return array|bool */function array2tree(&$array, $pid_name = 'pid', $child_key_name = 'children'){    $counter = array_children_count($array, $pid_name);    if (!isset($counter[0]) || $counter[0] == 0) {        return $array;    }    $tree = [];    while (isset($counter[0]) && $counter[0] > 0) {        $temp = array_shift($array);        if (isset($counter[$temp['id']]) && $counter[$temp['id']] > 0) {            array_push($array, $temp);        } else {            if ($temp[$pid_name] == 0) {                $tree[] = $temp;            }            else {                $array = array_child_append($array, $temp[$pid_name], $temp, $child_key_name);            }        }        $counter = array_children_count($array, $pid_name);    }    return $tree;}/** * 把元素插入到对应的父元素$child_key_name字段 * @param        $parent * @param        $pid * @param        $child * @param string $child_key_name 子元素键名 * @return mixed */function array_child_append($parent, $pid, $child, $child_key_name){    foreach ($parent as &$item) {        if ($item['id'] == $pid) {            if (!isset($item[$child_key_name])) {                $item[$child_key_name] = [];            }            $item[$child_key_name][] = $child;        }    }    return $parent;}/** * 解析layui树形组件数据 * @param $arr * @param array $target * @return array */function analyTreeData($arr, $target = []){    foreach ($arr as $v) {        $tmb = null;        $tmb = $v;        unset($v['children']);        $target[] = $v;        if (isset($tmb['children'])) $target = analyTreeData($tmb['children'], $target);    }    return $target;}/** * 响应前端数据，返回json数据 * @param $code * @param $msg * @param bool $data * @return string */function outMsg($code, $msg, $data = false){    header('Content-Type:application/json');    $re = [        'code' => $code,        'msg' => $msg,        'data' => $data    ];    if ($data == false) $re['data'] = [];    echo json_encode($re, 320);    die;}/** * 响应前端数据，返回json数据 * @param $code * @param $msg * @param $count * @param  bool $data * @return string */function outTableMsg($code, $msg, $count, $data = false){    header('Content-Type:application/json');    $re = [        'code' => $code,        'msg' => $msg,        'data' => $data,        'count' => $count    ];    if ($data == false) $re['data'] = [];    echo json_encode($re, 320);    die;}/** * 获取客户端真实IP * @return array|false|string */function getClientIP(){    global $ip;    if (getenv("HTTP_CLIENT_IP")) {        $ip = getenv("HTTP_CLIENT_IP");    } else if (getenv("HTTP_X_FORWARDED_FOR")) {        $ip = getenv("HTTP_X_FORWARDED_FOR");    } else if (getenv("REMOTE_ADDR")) {        $ip = getenv("REMOTE_ADDR");    } else {        $ip = "Unknow";    }    return $ip;}/** * 对象转数组 * @param object $obj 对象 * @return array */function object_to_array($obj){    $obj = (array)$obj;    foreach ($obj as $k => $v) {        if (gettype($v) == 'resource') {            return;        }        if (gettype($v) == 'object' || gettype($v) == 'array') {            $obj[$k] = (array)object_to_array($v);        }    }    return $obj;}/** * 给定URL，发送HTTP请求，返回JSON * @param  string $url 请求地址 * @param  json $data 向服务器发送的数据默认为null * @param  int        超时时间 * @return json       [description] */function sendHttpRequest($url, $data = null, $time_out = false){    $ch = curl_init();    curl_setopt($ch, CURLOPT_URL, $url);    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);  // 跳过检查    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);    $time_out !== false && curl_setopt($ch, CURLOPT_TIMEOUT, $time_out);    curl_setopt($ch, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_0); //强制协议为1.0    curl_setopt($ch, CURLOPT_HTTPHEADER, array("Expect:")); //头部要送出'Expect: '    curl_setopt($ch, CURLOPT_IPRESOLVE, CURL_IPRESOLVE_V4); //强制使用IPV4协议解析域名    //$data为null发送get请求，否者为post请求    if (!empty($data)) {        curl_setopt($ch, CURLOPT_POST, 1);        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);    }    $result = curl_exec($ch);    curl_close($ch);    return $result;}/** * 操作日志 * @param $type  日志类型 * @param string $action 操作事件 * @param string $content 操作内容 * JSON_UNESCAPED_UNICODE:json不需要unique编码 */function xLog($type, $action = '', $content = '', $user = false){    if (is_array($content) || is_object($content)) {        $content = json_encode($content, JSON_UNESCAPED_UNICODE);    }    $types = Db::name('log_type')->where('logtype', $type)->find();    if (!empty($types)) {        $type_id = $types['id'];    } else {        $field = [            'logtype' => $type,            'create_time' => date('Y-m-d H:i:s')        ];        Db::name('log_type')->insert($field);        //获取最后插入行的自增id        $type_id = Db::name('log_type')->getLastInsID();    }    $data = [        'typeid' => $type_id,        'username' => $user ?: session('username'),        'action' => $action,        'content' => $content,        'ip' => getClientIP(),        'create_time' => date('Y-m-d H:i:s'),    ];    $res = Db::name('user_log')->insert($data);    return $res;}/** * 操作日志 * @param $type  日志类型 * @param string $action 操作事件 * @param string $content 操作内容 * JSON_UNESCAPED_UNICODE:json不需要unique编码 */function wLog($type, $action = '', $content = '', $user = false){    if (is_array($content) || is_object($content)) {        $content = json_encode($content, JSON_UNESCAPED_UNICODE);    }    $types = Db::name('log_type')->where('logtype', $type)->find();    if (!empty($types)) {        $type_id = $types['id'];    } else {        $field = [            'logtype' => $type,            'create_time' => date('Y-m-d H:i:s')        ];        Db::name('log_type')->insert($field);        //获取最后插入行的自增id        $type_id = Db::name('log_type')->getLastInsID();    }    $data = [        'typeid' => $type_id,        'username' => $user ?: session('username'),        'action' => $action,        'content' => $content,        'ip' => getClientIP(),        'create_time' => date('Y-m-d H:i:s'),    ];    $res = Db::name('user_log')->insert($data);    return $res;}/**获取车辆轨迹 * @param $car_num车号 * @param $start开始时间 * @param $end结束时间 */function getTracks($car_num, $start, $end){    $data = array();    $data['entity_name'] = $car_num;    $data['start_time'] = $start;    $data['end_time'] = $end;    $data['ak'] = 'HUeQB6gASjP5tr9dsUq8nlU19rUXGtC9';    $data['service_id'] = '220938';    $url = 'http://yingyan.baidu.com/api/v3/track/gettrack';    $mcode = '6B:33:52:A1:12:FE:BD:2B:70:03:11:7F:76:66:07:8A:68:F9:BF:D6;com.song.taiyuan';    $page_size = 5000;    //轨迹开启纠偏    $is_processed = 1;    $process_optionArr = [        //轨迹去噪        'need_denoise=1',        'need_mapmatch=1',        //驾驶模式        'transport_mode=auto'    ];    $process_option = implode(',', $process_optionArr);    //驾车里程补偿    $supplement_mode = 'straight';    $request = http_build_query($data);    $url .= '?' . $request . '&mcode=' . $mcode . '&page_size=' . $page_size . '&is_processed=' . $is_processed . '&process_option=' . $process_option . '&supplement_mode=' . $supplement_mode;    $res = sendHttpRequest($url);    return $res;}/** * 生成新的任务单 * @return string */function createNewTaskId(){    $curr_date = date('ymd');    $task = \think\Db::name('prod_ht')        ->where([            ['ht_num', 'like', 'HY' . $curr_date . '%']        ])        ->order('ht_num desc')        ->value('ht_num');    $type_str = 'HY';    if (!$task) return $type_str . $curr_date . '0001';    $num = substr($task, 2, strlen($task));    $num += 1;    $newStr = sprintf('%04s', $num);    return $type_str . $newStr;}/** * 返回指定时间段的时间数组 * @param $start_time   开始时间 * @param $end_time     结束时间 * @param $type         类型 * @param $step         步数 * @return array */function format_time($start_time, $end_time, $type = 'hour', $step = 1){    $arr_time = [];    if ($start_time > $end_time) {        return $arr_time;    }    $arr_time[] = $start_time;    for ($i = $start_time; $i < $end_time; $i = date('Y-m-d H:i:s', strtotime("$i+$step $type"))) {        if ($i == $start_time) continue;        $arr_time[] = date('Y-m-d H:00:00', strtotime($i));    }    $arr_time[] = $end_time;    return $arr_time;}